CS5004 Homework 9 Shapes Photo Album Part 2 - views
Name: Hengwei Yang
NUID: 002675530


A. Changes from the Previous Assignment
    In order to accommodate different types of views, I have made
    the following modifications to the model and other components:

    PhotoAlbumModel Adjustments:
    - Changed the Map structure for shapes from a standard HashMap to a LinkedHashMap.
    This ensures that shapes are stored and accessed in the order they are introduced in the input commands,
    which allow shapes being rendered in same order by the views.

    ISnapshot Interface Adjustments:
    - The ISnapshot interface has been added one method to fetch a list of copies of all shapes
    present at the time of each snapshot taken. So each snapshot now maintains
    a copy of all shapes at the time of the snapshot without affecting the data stored in the PhotoAlbumModel.

    Removal of Utility Class:
    - Deleted the CanvasDimension utility class.
    The PhotoAlbumModel no longer uses a separate class to manage the dimensions of shapes.

    Rename Color Class as Colour:
    - Avoid collisions with Color class used by Java Swing

B. Project Structure
    The project is organized into three main directories:

    src (Sources Root): Contains all Java classes organized within the com.hw09 package.
    This package is further divided into:
    'controller' package for IController and PhotoAlbumController
    'main' package where PhotoAlbumMain is located, serving as the entry point for the application.
    'model' package which includes classes like IModel, ISnapshot, and IShape.
    'view' package holding the IView interface along with concrete implementations HTMLView and SwingView.

    resources (Resources Root): Stores static resources like text files used for input commands.
                                Also contains the copy of jar file and the output html generated by the jar.

    test (Test Root): Contains all unit tests for the application.

C. Workflow Description
    Initialization:
    - PhotoAlbumMain parses command line arguments such as "-in buildings.txt -v graphical 800 800"
     or ""-in buildings.txt -out myWeb.html -v web" to determine the input file name,
     view type, and other parameters. It then initializes the corresponding view, controller, and model.
    Only one IView, IController, and IModel are initialized regardless of the view type.

    Command Parsing and Execution:
    - An instance of PhotoAlbumController reads the designated text file line by line
    from the resources root. It handles commands in a case-insensitive manner,
    recognizing and processing directives such as "Shape" or "shape"
    to instruct the model to create and store shapes.

    Snapshot Management:
    - Once all commands are processed, the model completes all shape manipulations,
     including creation, movement, color changes, etc.
     Meanwhile, all snapshots capturing the states of shapes at various moments
     are compiled into a list.

    View Rendering:
    - Model will generate a list of snapshots after controller finish parsing command line.
    The controller then passes the list of snapshots (List<ISnapshot>) to the view.
    Depending on the type of view, the rendering outcome differs when the controller
    calls the produceViewFromSnapshots() method, each view knows exactly how to render
    the snapshot:
    HTMLView: Generates an HTML document depicting each snapshot.
    SwingView: Displays an interactive Java Swing interface allowing users to navigate through snapshots visually.
